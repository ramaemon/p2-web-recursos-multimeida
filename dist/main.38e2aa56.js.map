{"version":3,"sources":["js/main.js"],"names":["handleIntersection","entries","map","entry","isIntersecting","target","src","dataset","classList","remove","observer","unobserve","images","document","querySelectorAll","IntersectionObserver","forEach","image","observe"],"mappings":";AAAA,SAASA,EAAmBC,GAC1BA,EAAQC,IAAI,SAACC,GACPA,EAAMC,iBAGRD,EAAME,OAAOC,IAAMH,EAAME,OAAOE,QAAQD,IACxCH,EAAME,OAAOG,UAAUC,OAAO,YAE9BC,EAASC,UAAUR,EAAME,WAK/B,IAAMO,EAASC,SAASC,iBAAiB,aACnCJ,EAAW,IAAIK,qBAAqBf,GAC1CY,EAAOI,QAAQ,SAAAC,GAAK,OAAIP,EAASQ,QAAQD","file":"main.38e2aa56.js","sourceRoot":"../src","sourcesContent":["function handleIntersection(entries) {\n  entries.map((entry) => {\n    if (entry.isIntersecting) {\n      // Item has crossed our observation\n      // threshold - load src from data-src\n      entry.target.src = entry.target.dataset.src;\n      entry.target.classList.remove('lazyload');\n      // Job done for this item - no need to watch it!\n      observer.unobserve(entry.target);\n    }\n  });\n}\n\nconst images = document.querySelectorAll('.lazyload');\nconst observer = new IntersectionObserver(handleIntersection);\nimages.forEach(image => observer.observe(image));"]}